* Tasks
- TODO Get rid of static_cast (22).
- TODO Get rid of reinterpret cast (10).

* General
- TODO Refactor symbol. OO.
- TODO Implement data-aware scheduling.  For example, a component that
  routes messages needs to trigger a reaction based on an id in the
  message.
- TODO Add reactions that pick a parameter automatically.
* Garbage Collector
- TODO Consider marking slots as "non-scannable" if it belongs to a sub-instance or non-pointer.
* Runtime
- TODO Profile and optimize
- TODO Clean up stack frame.
* Paritioned Scheduler
- TODO Instrument to find bottlenecks.
- TODO Support migration
- TODO Use a generation counter to determine if an action needs to run (run it that many times)
- TODO Investigate ways to avoid spinning (random selection, skip N times if conflict, etc.)
- TODO Optimize hits per cycle
- TODO Topological sort of list

** Design Goals
- Fairness
  Assume a fixed point.

- Efficiency
  - Balance

** Description
A /task/ is a recurring unit of work corresponding to a concrete action or garbage collection on a component instance.
Each task is assigned to an /executor/ that is responsible for executing that task.
The /scheduler/ consists of a group of cooperating executors.

- Task - a recurring unit of work corresponding to a concrete action or garbage collection.
- Executor - an object that executes a collection of tasks.  In the partitioned scheduler, each task is assigned to an executor.
- Scheduler - a cooperating group of executors.
- Opportunity - an executor considers a task for execution.
- Hit - the task was executed (the precondition was true, there was garbage to collect, etc.).
- Cycle -
** Partitioned Scheduler
The paritioned scheduler assigns each task to a specific executor.

** Scheduler Optimization
** Executor Optimization
** Task Optimization
  Once the executor has selected a task, it should execute that task
  as efficiently as possible.  The main optimization is to avoid
  evaluating the precondition.  Thus, a simple optimization is to
  classify the precondition as being dynamic, constant false, or
  constant true.  Dynamic preconditions must be evaluated.  No task
  should be generated for constant false preconditions.  Constant true
  preconditions never need to be evaluated.  Another approach would be
  to evaluate relevant preconditions at the end of an action and store
  the bits.  This approach will require sophisticated semantic analysis.

Assumption of fixed-point?

* AST
- TODO Consolidate similar nodes.
- TODO Implement a node_cast similar to type_cast.
- TODO Use an ast namespace.
- TODO Replace ast_print with insertion operator.
* Semantic Analysis
- TODO Move type visitors to typed_value.
- TODO Move any remaining checking from process_definitions et al. to typed_value.
* Composition Analysis
- TODO Add support for TRIGGER_NONE.
* IO
- TODO Investigate how to implement timers.
- TODO Investigate how to incorporate POSIX IO.
