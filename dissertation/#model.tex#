\chapter{Model \label{model}}

In this chapter, we present a model for reactive programs called \emph{reactive components}.
The model is biased toward practical software development as opposed to formal methods.
Consequently, the model favors utility, practicality, flexibility, and ease of implementation.

\paragraph{Definitions.}
A \emph{component} consists of a set of variables, a set of member components, a set of ports, a set of actions, a set of reactions, and a set of bindings.
The variables may represent a finite or infinite state.
The set of member components supports the notion of recursive encapsulation.
A \emph{port} is a named interaction point with a function-like signature.
An \emph{action} consists of a precondition and a set of triggers.
A \emph{precondition} is a predicate over the state variable of the component.
A \emph{trigger} consists of condition, a set of port calls, and an effect.
A \emph{port call} 

port call

effect

reaction

binding

\paragraph{Units of composition.}
A unit of composition in our model is called a \emph{reactive component}.
A reactive component consists of a set of state variables, a set of input ports, a set of output ports, a set of internal ports, a set of member components, a set of $\alpha$-statements, a set of $\beta$-statements, and a set of static port definitions called $\gamma$-statements.
The \emph{readable ports} in a reactive component comprise the input ports, internal ports, and the output ports of its members.
The \emph{readable objects} (those that can appear on the RHS of an assignment or port definition) in a reactive component comprise its readable ports and its state variables.
Similarly, the \emph{writable ports} in a reactive component comprise the output ports, internal ports, and the input ports of its members and the \emph{writable objects} (those that can appear on the LHS of an assignment or port definition) in a reactive component comprise the writable ports and state variables.



action reaction

precondition

body/effect

reaction

trigger

port and port call

binding


As a starting point, we consider the $Clock$ automaton presented in~\cite{nancy1996distributed}.
A $Clock$ represents a free-running timer that can be sampled.
The $Clock$ automaton has an internal action $tick$ that increments $counter$, an input action $request$ that sets $flag$, and an output action $clock(t)$ that sends the current state of $counter$ and clears $flag$.
The precondition of $tick$ is true and the precondition of $clock(t)$ is $flag = true$.
A simple $ClockClient$ contains an output action $request$ for making a request which sets $flag$ and an input action $clock(t)$ for receiving the response which clears $flag$.
The precondition of $request$ is $flag = false$.
Note that the $flag$ in $Clock$ and the $flag$ in $ClockClient$ are distinct variables.

\begin{figure}
{
\input clock_automaton.tex
\centerline{\box\graph}
}
\caption{Graphical representation of the composition of a $Clock$ and $ClockClient$\label{clock_automaton}}
\end{figure}

Figure~\ref{clock_automaton} shows a graphical representation of the composition of $Clock$ and $ClockClient$.




The main limitation of the I/O automata model is that it only permits the pair-wise linking of transitions.
To illustrate, we define an $\alpha$-statement to be a transition that can be selected by the scheduler and a $\beta$-statement to be a transition that cannot be selected by the scheduler but must be linked to another transition to be executed.
$\alpha$-statements correspond to local actions in the I/O automata model and stand-alone assignment statements in UNITY while $\beta$-statements correspond to input actions in the I/O automata model and superimposed clauses in UNITY.
(Internal actions correspond to $\alpha$-statements to which $\beta$-statements cannot be linked.)
A single I/O automaton, then, can be viewed as a disconnected graph where each node is either an $\alpha$-statement or a $\beta$-statement.
A system composed of multiple I/O automata results in a forest of two-level trees where each root node is an $\alpha$-statement and each child node is a $\beta$-statement.



A model for reactive systems is a set of definitions regarding their structure and behavior.
A proposal for a new model for reactive systems should declare what is considered to be fundamental or desirable in a reactive system since this shapes the features of the model and makes the model appropriate for some systems (and perhaps inappropriate for others).
The motivation behind our model, described in chapter~\ref{introduction}, is the desire to express the semantics of reactive systems directly and structure systems through composition and decomposition.
The definitions provided by a model for reactive programs must be rigorously defined to allow one to make precise statements about reactive programs and their behavior.
The definitions are necessary for both informal, e.g., debugging, and formal, e.g., proving correctness, software development settings.
%% A rigorous set of definitions is the foundation of a proof logic that allows one to state and prove properties about reactive systems toward the goal of establishing correctness, performance, etc.
This section describes our approach to rigorously defining the model.
As formal verification is not the focus of this research, we leave the development of a proof logic for future work.
%%Formal verification is not the focus of this research, thus, we only outline a strategy for developing the proof logic for the model and leave a complete treatment for future work.

%% \paragraph{Limitations of the state of the art.}
%% We observe that existing models for reactive programs do not support principled decomposition.
%% First, we consider models based on the popular thread abstraction.
%% A thread consists of a program (a list of instructions) a set of state variables including a program counter that indicates the current instruction, and a set of shared structures for communication, e.g., shared state variables.
%% We assume that each instruction is deterministic so that next state and instruction is determined from the current state and instruction.
%% Currently, there is no known technique for composing arbitrary threads in a way that supports principled composition.
%% One way of defining composition for threads involves taking the Cartesian product of their respective programs and program counters and combining shared structures.
%% The flow of control in the resulting model is non-deterministic as the machine can choose to execute any subset of a combined instruction.
%% Thus, the result of composing threads is itself not necessarily a thread.
%% Similar arguments hold for the other requirements of principled composition.

\paragraph{Limitations of existing models.}
%% The sequential nature of threads causes a Cartesian ``blow-up'' of their programs and makes them unsuitable as a unit of composition.
%% One way to avoid this ``blow-up'' is to define a program to be a set of state variables and a set of multiple-assignment statements (as opposed to a list) as is done in the UNITY model~\cite{chandy1989parallel}.
UNITY~\cite{chandy1989parallel} and I/O automata~\cite{nancy1996distributed} are two formal models for reactive systems based on non-deterministic sequencing.
Execution in these models proceeds with a scheduler repeatedly selecting a transition, evaluating its guard, and executing it if the guard is true.
The scheduler is assumed to be fair meaning that it will select (but not necessary execute) a transition an infinite number of times in an infinite execution.
Transitions correspond to \emph{(parallel) assignment statements} in the UNITY model and \emph{actions} in the I/O automata model.
The UNITY model contains two means of composing programs which suggests that a model based on non-deterministic sequencing could support principled decomposition.
Creating a program via the \emph{union} operation involves taking the union of the state variables (named-based equivalence) and assignment statements of the constituent programs.
\emph{Superposition} is a means of composition that transforms an underlying program into another.
The transformation is allowed to add new state variables, add new assignment statements with the limitation that they only update new variables, and augment existing assignment statements but only by adding clauses that modify new variables.
The size of the resulting program (measured in assignment statements) is on the order of the sum of the sizes of the two constituent programs as opposed to the product.
%% This somewhat matches the intuition that the result of composition should be the sum of its parts as opposed to the product of its parts.

Superposition is property-preserving while union is not property-preserving.
However, superposition has certain weaknesses as described by the authors of UNITY~\cite{chandy1989parallel}:
\begin{quotation}
Both union and superposition are methods for structuring programs.
The union operation applies to two programs to yield a composite program.
Unlike union, a transformed program resulting from superposition cannot be described in terms of two component programs, one of which is the underlying program.
The absence of such a decomposition limits the algebraic treatment of superposition.
Furthermore, a description of augmentation seems to require intimate knowledge of statements in the underlying program.
Appropriate syntactic mechanisms should be developed to solve some of these problems.
\end{quotation}
They go on to say that a restricted form of superposition, i.e., one that only adds variables and assignment statements, is equivalent to union and can be analyzed as such.

The essence of superposition is that a transition in one program can be linked to a transition in another program, i.e., parallel composition.
Whereas UNITY lacks the language support for doing so, the I/O automata~\cite{nancy1996distributed} model presents a partial solution by associating names with transitions (actions).
Actions in different automata can then be composed on the basis of name matching.
The I/O automata model defines three kinds of actions:  output actions, input actions, and internal actions.
Output actions and internal actions, collectively called local actions, contain a guard and may be selected and executed by the scheduler.
Input actions must be composed with an output action to be executed.
Output actions can produce values that are consumed by input actions.
Since the state of each I/O automaton is private, composition in I/O automata is property-preserving.

The main limitation of the I/O automata model is that it only permits the pair-wise linking of transitions.
To illustrate, we define an $\alpha$-statement to be a transition that can be selected by the scheduler and a $\beta$-statement to be a transition that cannot be selected by the scheduler but must be linked to another transition to be executed.
$\alpha$-statements correspond to local actions in the I/O automata model and stand-alone assignment statements in UNITY while $\beta$-statements correspond to input actions in the I/O automata model and superimposed clauses in UNITY.
(Internal actions correspond to $\alpha$-statements to which $\beta$-statements cannot be linked.)
A single I/O automaton, then, can be viewed as a disconnected graph where each node is either an $\alpha$-statement or a $\beta$-statement.
A system composed of multiple I/O automata results in a forest of two-level trees where each root node is an $\alpha$-statement and each child node is a $\beta$-statement.

\paragraph{Contribution.}
We propose a model for reactive programs that resolves the weakness of superposition and the structural limitations of composition in I/O automata.
The idea for the proposed model is straightforward:  extend composition to support general transition structures such as trees of arbitrary depth.
A program in our model consists of state variables, $\alpha$-statements, $\beta$-statements, and ports that allow transitions in different programs to be linked.
%% As illustrated by superposition, programs based on a set of state variables and a set of assignment statements have the properties necessary to support principled decomposition.
Complex state transitions, i.e., those that involving a number of programs, can be constructed in a principled fashion by cascading $\beta$-statements, i.e., parallel composition.
For example, a layered protocol can be expressed as a chain of transitions where the first transition corresponds to receiving a bit, the second transition corresponds to receiving a byte, the third transition corresponds to receiving a message, etc.
Upon reception of the last bit, the entire chain will fire.
Our first contribution will be a formal definition of the model and justification that it supports principled decomposition.

%% \subsection{Formalization \label{formalization}}

\paragraph{Formalization.}
A model for reactive systems should provide a rigorous set of definitions concerning units of composition and composition operations towards developing a platform that realizes the model.
%% developing a proof logic that allows one to establish properties of a system with the intent of proving correctness or analyzing complexity.
For a state-based model, the definitions should define the basic structure of a unit of composition and the encoding of state transformations.
Similarly, the definitions should provide execution semantics that describe how state transformations in units of composition occur over time.
The definitions of composition operations describe how units of composition are composed into systems and how systems can be interpreted with respect to the execution semantics.
A formal definition will allow us to verify the claim that our model does indeed support principled composition and decomposition and defines the correctness criteria for a platform implementing the model.
Furthermore, rigorous definitions are necessary when communicating about a design or analyzing the behavior of an existing system and are the first step toward developing a proof logic that allows one to establish the properties of a reactive system.

\paragraph{Units of composition.}
A unit of composition in our model is called a \emph{reactive component}.
A reactive component consists of a set of state variables, a set of input ports, a set of output ports, a set of internal ports, a set of member components, a set of $\alpha$-statements, a set of $\beta$-statements, and a set of static port definitions called $\gamma$-statements.
The \emph{readable ports} in a reactive component comprise the input ports, internal ports, and the output ports of its members.
The \emph{readable objects} (those that can appear on the RHS of an assignment or port definition) in a reactive component comprise its readable ports and its state variables.
Similarly, the \emph{writable ports} in a reactive component comprise the output ports, internal ports, and the input ports of its members and the \emph{writable objects} (those that can appear on the LHS of an assignment or port definition) in a reactive component comprise the writable ports and state variables.

An $\alpha$-statement consists of a precondition and an effect.
A precondition is a Boolean expression over a subset of the readable objects.
An effect is a set of assignment statements and port definitions.
An assignment statement ($:=$) defines the next value for a state variable.
A port definition ($=$) defines the value associated with a port.
A $\beta$-statement consists of a trigger and an effect.
A trigger is a port in the set of readable ports that when defined causes the application of the effect.

A port is either \emph{static} or \emph{dynamic} based on its usage.
A static port is defined completely in terms of state variables and other static ports.
A dynamic port is defined within the context of an $\alpha$-statement.
Ports referenced in a precondition must be static while triggers must be dynamic.

Based on our goal of principled composition and decomposition, reactive components are based on non-deterministic sequencing.
The scheduler repeatedly (and non-deterministically) selects an $\alpha$-statement, evaluates its precondition, and applies the effect if the precondition is true.
Conceptually, applying the effect has two phases corresponding to port definition and state assignment.
The port definition phase starts by defining ports using the effect of the $\alpha$-statement.
These port definitions can cascade by triggering $\beta$-statements and $\gamma$-statements.
Any state assignment in the effect of a triggered $\beta$-statement is evaluated in the state assignment phase.
In the state assignment phase, the RHS of each assignment statement is computed and then assigned to the state variable on the LHS.
The scheduler is assumed to be fair meaning that it selects each $\alpha$-statement an infinite number of times in an infinite execution.
Interpreting a program as a set of assignment statements as opposed to a list facilitates the substitutional equivalence necessary for principled composition and decomposition.

\begin{figure}
\begin{verbatim}
component Clock {
  var int counter (0)
  var bool flag (false)
  in signal request
  out int clock

  Tick: alpha (true) {
    counter := counter + 1
  }

  Request: beta (request) {
    flag := true
  }

  Clock: alpha (flag) {
    clock = counter
    flag := false
  }
}
\end{verbatim}
\caption{Definition of the Clock component\label{clock_component}}
\end{figure}

To illustrate reactive components, we present a number of reactive components based on the Clock automaton of~\cite{nancy1996distributed} encoded as a reactive component and listed in figure~\ref{clock_component}.
The Clock component contains two state variables \verb+counter+ and \verb+flag+ indicating the current count and that the count has been requested, respectively.
The Clock component contains an input port \verb+request+ and output port \verb+clock+ which can be used to request and receive the count.
The use of \verb+request+ as a trigger and the definition of \verb+clock+ in the \verb+Clock+ $\alpha$-statement implies that both ports are dynamic.
The \verb+Tick+ $\alpha$-statement increments the counter and is always enabled, i.e., its precondition is always true.
The \verb+Request+ $\beta$-statement sets the \verb+flag+ when the \verb+request+ port is defined due to the execution of an $\alpha$-statement.
The \verb+Clock+ $\alpha$-statement reports the current count by defining the \verb+counter+ port and resetting the \verb+flag+.
The effect of the \verb+Clock+ $\alpha$-statement is atomic, i.e., the port definition and assignment statement are composed in parallel.

\begin{figure}
\begin{verbatim}
component ClockPoll {
  out signal request
  in int clock_in
  out int clock_out

  Request: alpha (true) {
    request = defined
  }

  G1: if (clock_in % 2 == 0) {
    clock_out = clock_in
  }
}
\end{verbatim}
\caption{Definition of the ClockPoll component\label{clock_poll_component}}
\end{figure}

Figure~\ref{clock_poll_component} lists the component we use to poll the Clock component of figure~\ref{clock_component}.
The ClockPoll component sends requests using the dynamic \verb+request+ port in the $\alpha$-statement labeled \verb+Request+.
The ClockPoll component expects to receive the clock value on the dynamic \verb+clock_in+ port.
The ClockPoll component has a $\gamma$-statement \verb+G1+ that replicates the \verb+clock_in+ port on the \verb+clock_out+ port when the \verb+clock_in+ port is even.
Thus, ports can be conditionally defined and used to craft even more sophisticated transitions.
The \verb+clock_out+ port is dynamic since it is derived from the \verb+clock_in+ port.

\begin{figure}
\begin{verbatim}
component ClockCounter {
  in int clock
  var int c (0)
  out int count

  Clock: beta (clock) {
    c := c + 1
  }

  G1: count = c
}
\end{verbatim}
\caption{Definition of the ClockCounter component\label{clock_counter_component}}
\end{figure}

Figure~\ref{clock_counter_component} lists the component we use to count responses from the ClockPoll component of figure~\ref{clock_poll_component}.
The ClockCounter component contains a single $\beta$-statement that increments the number of responses.
The \verb+G1+ $\gamma$-statement defines the \verb+count+ output port to be the number of responses.
The \verb+count+ port thus is \emph{static} since it is derived solely from state variables.

\begin{figure}
\begin{verbatim}
component ClockSys {
  member Clock clock
  member ClockPoll poll
  member ClockCounter counter

  clock.request = poll.request
  poll.clock_in = c.clock
  counter.clock = poll.clock_out
}
\end{verbatim}
\caption{Definition of a top-level component composing the Clock component, ClockPoll component, and ClockCounter component\label{clocksys_component}}
\end{figure}

\begin{figure}
{
\input clocksys.tex
\centerline{\box\graph}
}
\caption{A block diagram representation of the ClockSys component\label{clocksys_component_graphic}}
\end{figure}

\paragraph{Composition.}
Composition is achieved by declaring member components and establishing relationships among input and output ports through $\alpha$-statements, $\beta$-statements, and port definitions.
Using the Clock component of figure~\ref{clock_component}, the ClockPoll component of figure~\ref{clock_poll_component}, and ClockCounter component of figure~\ref{clock_counter_component}, we define a component that is a composition of these components.
The resulting ClockSys component is listed in figure~\ref{clocksys_component}.
The ClockSys component declares three members representing a clock component called \verb+clock+, a component to poll the clock called \verb+poll+, and a component to count even responses called \verb+counter+.
The various $\gamma$-statements associate the input and output ports of the member components.
Figure~\ref{clocksys_component_graphic} contains a block diagram representation of the ClockSys component that shows the port connections and directions.

\begin{figure}
{
\input clocksys_alpha.tex
\centerline{\box\graph}
}
\caption{The $\alpha$-forest for the ClockSys component\label{clocksys_component_alpha}.  Solid nodes represent $\alpha$-statements, dashed nodes represent $\beta$-statements, and dotted nodes represent $\gamma$-statements.}
\end{figure}

A component can also be interpreted as a forest of $\alpha$-trees called an $\alpha$-forest.
Figure~\ref{clocksys_component_alpha} shows the $\alpha$-forest for the ClockSys component.
A component instance can appear multiple times in an $\alpha$-tree.
Each $\alpha$-tree defines a context consisting of a set of readable objects (LHS) and writable objects (RHS).
An $\alpha$-tree is well-defined if 1) each port in the set of readable objects is defined to a unique value and 2) there is a unique next state for each state variable in the set of writable objects.

The ability for a component instance to appear multiple times creates the opportunity for the composition of well-defined components to result in a component that is not well-defined.
This situation might occur, for example, if a component simultaneously drives two inputs that are mutually exclusive.
More subtly, one can envision creating a ``feedback loop'' that includes incompatible statements in the same component.
%% The phenomena does not appear in the UNITY and I/O automata models but seems to be the result of additional flexibility when composing components.
By strengthening the well-definedness property to say that a port or next state can only be \emph{defined} once in the context of an $\alpha$-statement (instead of being defined to a unique value), one can mechanically check that a composed component is well-defined.

\paragraph{Principled composition and decomposition.}
The formalization of the model should allow us to show that the model supports principled composition and decomposition.
The trivial principles of principled composition and decomposition come directly from the definition of the model.

To show that the behavior of a component is encapsulated by its interface, we first define its interface to be the set of input and output ports.
The behavior of a component can then be described using execution traces where the events correspond to patterns of port definition.
This treatment is consistent with trace properties in I/O automata which also serve to encapsulate and abstract the behavior of I/O automata.

To show that properties survive composition, we must prove theorems that correspond to the superposition theorem in UNITY and composition theorems of I/O automata.
In general, there are two kinds of properties:  those that are assertions about state variables and those that are assertions about execution traces.
For state-based properties, we will replicate the superposition theorem of UNITY which is based on the observation that state variables cannot be modified outside of the component in which they are defined, therefore, all properties continue to hold when composed.
For trace-based properties, we will replicate the composition theorems of I/O automata which state that traces compose due to the fairness property of the scheduler.

Substitutional equivalence can be shown through a constructive proof that substitutes the definition of a member for its instance.
This can be performed mechanically by first changing all ports to internal and then renaming entities in the member component, e.g., prefixing with the name of the member.
Substitution is linear in the size of the member due to the definition of a program as a set of assignment statements as opposed to a list.
The compositionality of components is justified by substitutional equivalence.
%%We will explore the conditions whereby the properties of a composed component may be mechanically derived from the properties of the member components.

%% \paragraph{Proof logic.}
%% One strategy for developing a proof logic for our model is to extend the techniques developed for the UNITY and I/O automata models.
%% The proof logic of UNITY is based on the properties of programs being expressed in terms of state variables.
%% In this style, a safety property says that some bad state is never reached and a liveness property says that eventually some good (goal) state is reached.
%% The proof logic of I/O automata is based on the properties of programs being expressed in terms of execution traces.
%% This is particularly useful when reasoning about a member component since the only observable part of a member component is its execution trace.
%% In this style, a safety property says that some bad trace never occurs and a liveness property says that some good trace will occur.
%% In order to reuse the proof logic of UNITY and I/O automata, one must show that our model meets the assumptions that allowed for the development of the corresponding proof logic.
%% Toward this end, we believe the well-definedness property is sufficient to establish the necessary assumptions.

\paragraph{Summary.}
In this section, we have proposed two contributions toward a model for reactive system development.
First, we proposed formal definition for system structure that facilitates composition and decomposition.
%%Second, we proposed to develop a proof logic for the model based on the existing proof logic of UNITY and I/O automata.
Second, we proposed to show that the model supports principled composition and decomposition by appealing to the definitions of the model. %% and its proof logic.
