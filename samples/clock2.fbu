// A version of the Clock automaton of Distributed Algorithms, p. 213.
// This implementation uses synchronous getters to increase parallelism.

type Counter component {
  counter uint;
};

action (this $ imm Counter) (true) {
  trigger {
    this.counter++;
    println `Counter is now `, this.counter;
  };
}

getter (this $ imm Counter) Counter () uint {
  return this.counter;
}

type Clock component {
  counter Counter;
  flag bool;
  response port (t uint);
};

reaction (this $ imm Clock) request () {
  trigger {
    this.flag = true;
  };
}

action (this $ imm Clock) (this.flag) {
  trigger response (this.counter.Counter()) {
    this.flag = false;
  };
}

type Sampler component {
  flag bool;
  request port ();
};

action (this $ imm Sampler) (this.flag!) {
  trigger request () {
    this.flag = true;
  };
}

reaction (this $ imm Sampler) response (t uint) {
  println `Received `, t;
  trigger {
    this.flag = false;
  };
}

type System component {
  sampler Sampler;
  clock Clock;
};

bind (this $System) {
  this.sampler.request -> this.clock.request;
  this.clock.response -> this.sampler.response;
}

instance s System;
