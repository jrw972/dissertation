type Element struct
{
  value *heap uint;
  next *Element;
};

type Queue struct
{
  head *Element;
  tail **Element;
};

func (this *Queue) Push (v *heap uint)
{
  if this.head == nil
    {
      this.tail = &this.head;
    };

  var e *Element;
  e = new (Element);
  e.value = v;
  *this.tail = e;
  this.tail = &e.next;
}

func (this *Queue) Pop ()
{
  this.head = this.head.next;
  if this.head == nil
    {
      this.tail = &this.head;
    };
}

func (this +const * Queue) Empty () bool
{
  return this.head == nil;
}

func (this +const * Queue) Front () +const *heap uint
{
  return this.head.value;
}

type Channel component
{
  queue Queue;
  receive push (message +foreign *heap uint);
};

reaction (this +const * Channel) send (message +foreign *heap uint)
{
  var x *heap uint;
  x = move (message);
  activate
  {
    this.queue.Push (x);
  };
}

action (this +const * Channel) (!this.queue.Empty ())
{
  activate receive (this.queue.Front ())
    {
      this.queue.Pop ();
    };
}

type System component
{
  channel Channel;
  send_count uint;
  send push (message +foreign *heap uint);
};

init (this *System) Initially ()
{ }

action (this +const * System) (this.send_count != 100u)
{
  var x *heap uint;
  x = new (heap uint);
  change (x, y)
  {
    *y = this.send_count;
  };
  activate send (x)
  {
    println (`Sent `, this.send_count);
    this.send_count++;
  };
}

reaction (this +const * System) receive (message +foreign *heap uint)
{
  var x *uint;
  x = merge (message);
  println (`Received `, *x);
}

bind (this *System) {
  this.send -> this.channel.send;
  this.channel.receive -> this.receive;
}

instance s System Initially ();
