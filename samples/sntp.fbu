type Timer component {
     fd FileDescriptor;
     Alarm push ();
};

init (this @Timer) Init (interval uint64) {
     this.fd = timerfd_create();
     if (interval != 0u64) {
          timerfd_settime(this.fd, interval);
     }
}

action (this @Timer const) (readable(this.fd)) {
     var buf [8u]uint8;
     var r int;
     r = read(this.fd, buf[0u:8u]);
     trigger Alarm () { };
}

type UdpMessage struct {
  host string;
  port uint16;
  msg string;
};

type Element struct
{
  value UdpMessage;
  next @Element;
};

type Queue struct
{
  head @Element;
  tail @@Element;
};

func (this @Queue) Push (value UdpMessage)
{
  if this.head == nil
    {
      this.tail = &this.head;
    };

  var e @Element;
  e = new Element;
  e.value = value;
  *this.tail = e;
  this.tail = &e.next;
}

func (this @Queue) Pop ()
{
  this.head = this.head.next;
  if this.head == nil
    {
      this.tail = &this.head;
    };
}

func (this @Queue const) Empty () bool
{
  return this.head == nil;
}

func (this @Queue) Front () UdpMessage
{
  return this.head.value;
}

type UdpParticipant component {
     fd FileDescriptor;
     queue Queue;
};

reaction (this @UdpParticipant const) Send (host string foreign; port uint16; msg string foreign) {
     var m UdpMessage;
     m.host = copy (host);
     m.port = port;
     m.msg = copy (msg);
     trigger {
          this.queue.Push (m);
     };
}

action (this @UdpParticipant const) (!this.queue.Empty () && writable (this.fd)) {
       trigger {
              var m UdpMessage = this.queue.Front ();
              var b []uint;
              /*              sendto (this.fd, */
              println `Send: `, m.host, m.port, m.msg;
              this.queue.Pop ();
       }
}

init (this @UdpParticipant) Init () {
     this.fd = udp_socket();
}

type System component {
     timer Timer;
     udp UdpParticipant;
     Send push (host string foreign; port uint16; msg string foreign);
};

bind (this @System) {
     this.timer.Alarm -> this.Alarm;
     this.Send -> this.udp.Send;
}

init (this @System) Init () {
     this.timer.Init(1u64);
     this.udp.Init();
}

reaction (this @System const) Alarm () {
     trigger Send (`localhost`, 8345u16, `hello, world`) { };
}

instance s System Init;