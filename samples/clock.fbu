// A component based on the Clock automaton of Distributed Algorithms, p. 213.
type Clock component {
  counter uint;
  flag bool;
  response push (t uint);
};

action (this +const * Clock) (true) {
  activate {
    this.counter++;
    println `Counter is now `, this.counter;
  };
}

reaction (this +const * Clock) request () {
  activate {
    this.flag = true;
  };
}

action (this +const * Clock) (this.flag) {
  activate response (this.counter) {
    this.flag = false;
  };
}

type Sampler component {
  flag bool;
  request push ();
};

action (this +const * Sampler) (!this.flag) {
  activate request () {
    this.flag = true;
  };
}

reaction (this +const * Sampler) response (t uint) {
  println `Received `, t;
  activate {
    this.flag = false;
  };
}

type System component {
  sampler Sampler;
  clock Clock;
};

init (this *System) Initially ()
{ }

bind (this *System) {
  this.sampler.request -> this.clock.request;
  this.clock.response -> this.sampler.response;
}

instance s System Initially;
