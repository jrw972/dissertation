/*
 * Implementation of NTP
 * http://tools.ietf.org/html/rfc5905
 */

// #include <math.h>               /* avoids complaints about sqrt() */
// #include <sys/time.h>           /* for gettimeofday() and friends */
// #include <stdlib.h>             /* for malloc() and friends */
// #include <string.h>             /* for memset() */

/*
 * Data types
 *
 * This program assumes the int data type is 32 bits and the long data
 * type is 64 bits.  The native data type used in most calculations is
 * floating double.  The data types used in some packet header fields
 * require conversion to and from this representation.  Some header
 * fields involve partitioning an octet, here represented by individual
 * octets.
 *
 * The 64-bit NTP timestamp format used in timestamp calculations is
 * unsigned seconds and fraction with the decimal point to the left of
 * bit 32.  The only operation permitted with these values is
 * subtraction, yielding a signed 31-bit difference.  The 32-bit NTP
 * short format used in delay and dispersion calculations is seconds and
 * fraction with the decimal point to the left of bit 16.  The only
 * operations permitted with these values are addition and
 * multiplication by a constant.
 *
 * The IPv4 address is 32 bits, while the IPv6 address is 128 bits.  The
 * message digest field is 128 bits as constructed by the MD5 algorithm.
 * The precision and poll interval fields are signed log2 seconds.
 */
type tstamp uint64;   /* NTP timestamp format */
type tdist uint32;    /* NTP short format */
type ipaddr uint64;   /* IPv4 or IPv6 address */
type digest uint64;   /* md5 digest */

/*
 * Timestamp conversion macroni
 */
const FRIC float64 = 65536.f64;                                             /* 2^16 as a double */
func D2FP (r tdist) tdist { return cast<tdist>(cast<float64>(r) * FRIC); }  /* NTP short */
func FP2D (r tdist) float64 { return cast<float64>(r) / FRIC; }

const FRAC float64 = 4294967296.f64;                                            /* 2^32 as a double */
func D2LFP (a tstamp) tstamp { return cast<tstamp>(cast<float64>(a) * FRAC); }  /* NTP timestamp */
func LFP2D (a tstamp) float64 { return cast<float64>(a) / FRAC; }
// Convert from Unix time to long fixed point (tstamp).
//#define U2LFP(a)   (((unsigned long long) \
//                       ((a).tv_sec + JAN_1970) << 32) + \
//                       (unsigned long long) \
//                       ((a).tv_usec / 1e6 * FRAC))

/*
 * Arithmetic conversions
 */
func LOG2D (a int8) float64 {
  /* poll, etc. */
  if a < 0i8 {
    return 1.f64 / cast<float64>((1u64 << cast<uint8>((a * -1i8))));
  } else {
    return cast<float64>(1i64 << cast<uint8>(a));
  }
}
//#define SQUARE(x)       (x * x)
//#define SQRT(x)         (sqrt(x))

/*
 * Global constants.  Some of these might be converted to variables
 * that can be tinkered by configuration or computed on-the-fly.  For
 * instance, the reference implementation computes PRECISION on-the-fly
 * and provides performance tuning for the defines marked with % below.
 */
const VERSION uint = 4u;          /* version number */
const MINDISP float64 = .01f64;   /* % minimum dispersion (s) */
const MAXDISP float64 = 16f64;    /* maximum dispersion (s) */
const MAXDIST float64 = 1f64;     /* % distance threshold (s) */
const NOSYNC int8 = 0x3i8;        /* leap unsync */
const MAXSTRAT int8 = 16i8;       /* maximum stratum (infinity metric) */
const MINPOLL int8 = 6i8;         /* % minimum poll interval (64 s)*/
const MAXPOLL uint = 17u;         /* % maximum poll interval (36.4 h) */
const MINCLOCK uint = 3u;         /* minimum manycast survivors */
const MAXCLOCK uint = 10u;        /* maximum manycast candidates */
const TTLMAX uint = 8u;           /* max ttl manycast */
const BEACON uint = 15u;          /* max interval between beacons */

const PHI float64 = 15e-6f64;   /* % frequency tolerance (15 ppm) */
const NSTAGE uint = 8u;         /* clock register stages */
const NMAX uint = 50u;          /* maximum number of peers */
const NSANE uint = 1u;          /* % minimum intersection survivors */
const NMIN uint = 3u;           /* % minimum cluster survivors */

// /*
//  * Global return values
//  */
// #define TRUE            1       /* boolean true */
// #define FALSE           0       /* boolean false */

/*
 * Local clock process return codes
 */
const IGNORE uint = 0u;       /* ignore */
const SLEW uint = 1u;         /* slew adjustment */
const STEP uint = 2u;         /* step adjustment */
const PANIC uint = 3u;        /* panic - no adjustment */

/*
 * System flags
 */
const S_FLAGS uint = 0u;       /* any system flags */
const S_BCSTENAB uint = 0x1u;  /* enable broadcast client */

/*
 * Peer flags
 */
const P_FLAGS uint = 0u;       /* any peer flags */
const P_EPHEM uint = 0x01u;    /* association is ephemeral */
const P_BURST uint = 0x02u;    /* burst enable */
const P_IBURST uint = 0x04u;   /* intial burst enable */
const P_NOTRUST uint = 0x08u;  /* authenticated access */
const P_NOPEER uint = 0x10u;   /* authenticated mobilization */
const P_MANY uint = 0x20u;     /* manycast client */

/*
 * Authentication codes
 */
const A_NONE uint = 0u;       /* no authentication */
const A_OK uint = 1u;         /* authentication OK */
const A_ERROR uint = 2u;      /* authentication error */
const A_CRYPTO uint = 3u;     /* crypto-NAK */

/*
 * Association state codes
 */
const X_INIT uint =         0u;       /* initialization */
const X_STALE uint =        1u;       /* timeout */
const X_STEP uint =         2u;       /* time step */
const X_ERROR uint =        3u;       /* authentication error */
const X_CRYPTO uint =       4u;       /* crypto-NAK received */
const X_NKEY uint =         5u;       /* untrusted key */

/*
 * Protocol mode definitions
 */
const M_RSVD uint =          0u;       /* reserved */
const M_SACT uint =          1u;       /* symmetric active */
const M_PASV uint =          2u;       /* symmetric passive */
const M_CLNT uint =          3u;       /* client */
const M_SERV uint =          4u;       /* server */
const M_BCST uint =          5u;       /* broadcast server */
const M_BCLN uint =          6u;       /* broadcast client */

/*
 * Clock state definitions
 */
// TODO:  Change to enum.
const NSET int =            0i;       /* clock never set */
const FSET int =            1i;       /* frequency set from file */
const SPIK int =            2i;       /* spike detected */
const FREQ int =            3i;       /* frequency mode */
const SYNC int =            4i;       /* clock synchronized */

// #define min(a, b)   ((a) < (b) ? (a) : (b))
// #define max(a, b)   ((a) < (b) ? (b) : (a))

/*
 * The receive and transmit packets may contain an optional message
 * authentication code (MAC) consisting of a key identifier (keyid) and
 * message digest (mac in the receive structure and dgst in the transmit
 * structure).  NTPv4 supports optional extension fields that
 * are inserted after the header and before the MAC, but these are
 * not described here.
 *
 * Receive packet
 *
 * Note the dst timestamp is not part of the packet itself.  It is
 * captured upon arrival and returned in the receive buffer along with
 * the buffer length and data.  Note that some of the char fields are
 * packed in the actual header, but the details are omitted here.
 */
type r struct {
        srcaddr      ipaddr;    /* source (remote) address */
        dstaddr      ipaddr;    /* destination (local) address */
        version      int8;      /* version number */
        leap         int8;      /* leap indicator */
        mode         int8;      /* mode */
        stratum      int8;      /* stratum */
        poll         int8;      /* poll interval */
        s_precision  int8;      /* precision */
        rootdelay    tdist;     /* root delay */
        rootdisp     tdist;     /* root dispersion */
        refid        int8;      /* reference ID */
        reftime      tstamp;    /* reference time */
        org          tstamp;    /* origin timestamp */
        rec          tstamp;    /* receive timestamp */
        xmt          tstamp;    /* transmit timestamp */
        keyid        int;       /* key ID */
        mac          digest;    /* message digest */
        dst          tstamp;    /* destination timestamp */
};

/*
 * Transmit packet
 */
type x struct {
        dstaddr    ipaddr;      /* source (local) address */
        srcaddr    ipaddr;      /* destination (remote) address */
        version      int8;      /* version number */
        leap         int8;      /* leap indicator */
        mode         int8;      /* mode */
        stratum      int8;      /* stratum */
        poll         int8;      /* poll interval */
        s_precision  int8;      /* precision */
        rootdelay   tdist;      /* root delay */
        rootdisp    tdist;      /* root dispersion */
        refid        int8;      /* reference ID */
        reftime    tstamp;      /* reference time */
        org        tstamp;      /* origin timestamp */
        rec        tstamp;      /* receive timestamp */
        xmt        tstamp;      /* transmit timestamp */
        keyid         int;      /* key ID */
        dgst       digest;      /* message digest */
};

/*
 * Filter stage structure.  Note the t member in this and other
 * structures refers to process time, not real time.  Process time
 * increments by one second for every elapsed second of real time.
 */
type f struct {
        t       tstamp;         /* update time */
        offset  float64;         /* clock ofset */
        delay   float64;         /* roundtrip delay */
        disp    float64;         /* dispersion */
};

/*
 * Association structure.  This is shared between the peer process
 * and poll process.
 */
type p struct {
         /*
         * Variables set by configuration
         */
        srcaddr  ipaddr;      /* source (remote) address */
        dstaddr  ipaddr;      /* destination (local) address */
        version  int8;        /* version number */
        hmode    int8;        /* host mode */
        keyid    int;         /* key identifier */
        flags    int;         /* option flags */
         /*
         * Variables set by received packet
         */
        leap       int8;        /* leap indicator */
        pmode      int8;        /* peer mode */
        stratum    int8;        /* stratum */
        ppoll      int8;        /* peer poll interval */
        rootdelay  float64;     /* root delay */
        rootdisp   float64;     /* root dispersion */
        refid      int8;        /* reference ID */
        reftime    tstamp;      /* reference time */
//#define begin_clear org       /* beginning of clear area */
        org        tstamp;      /* originate timestamp */
        rec        tstamp;      /* receive timestamp */
        xmt        tstamp;      /* transmit timestamp */
         /*
         * Computed data
         */
        t       float64;       /* update time */
        f       [NSTAGE]f;     /* clock filter */
        offset  float64;       /* peer offset */
        delay   float64;       /* peer delay */
        disp    float64;       /* peer dispersion */
        jitter  float64;       /* RMS jitter */
         /*
         * Poll process variables
         */
        hpoll        int8;      /* host poll interval */
        burst        int;       /* burst counter */
        reach        int;       /* reach register */
        ttl          int;       /* ttl (manycast) */
//#define end_clear unreach     /* end of clear area */
        unreach      int;       /* unreach counter */
        outdate      int;       /* last poll time */
        nextdate     int;       /* next poll time */
};

/*
 * Chime list.  This is used by the intersection algorithm.
 */
type m struct {              /* m is for Marzullo */
        p     @p;            /* peer structure pointer */
        type_ int;           /* high +1, mid 0, low -1 */
        edge  float64;       /* correctness interval edge */
};

/*
 * Survivor list.  This is used by the clustering algorithm.
 */
type v struct {
        p       @p;            /* peer structure pointer */
        metric  float64;       /* sort metric */
};

/*
 * System structure
 */
type s struct {
        t            tstamp;    /* update time */
        leap         int8;      /* leap indicator */
        stratum      int8;      /* stratum */
        poll         int8;      /* poll interval */
        precision    int8;      /* precision */
        rootdelay    float64;   /* root delay */
        rootdisp     float64;   /* root dispersion */
        refid        int8;      /* reference ID */
        reftime      tstamp;    /* reference time */
        m            [NMAX]m;   /* chime list */
        v            [NMAX]v;   /* survivor list */
        p            @p;        /* association ID */
        offset       float64;   /* combined offset */
        jitter       float64;   /* combined jitter */
        flags        int;       /* option flags */
        n            int;       /* number of survivors */
};

func (this @s) rstclock (t tstamp /* new update time */)
{
  this.t = t;
}

/*
 * Local clock structure
 */
type c struct {
        t       tstamp;       /* update time */
        state   int;          /* current state */
        offset  float64;       /* current offset */
        last    float64;       /* previous offset */
        count   int;          /* jiggle counter */
        freq    float64;       /* frequency */
        jitter  float64;       /* RMS jitter */
        wander  float64;       /* RMS wander */
};

/*
 * rstclock() - clock state machine
 */
func (this @c) rstclock (state  int;     /* new state */
                         offset float64  /* new offset */)
{
        /*
         * Enter new state and set state variables.  Note, we use the
         * time of the last clock filter sample, which must be earlier
         * than the current time.
         */
        this.state = state;
        this.offset = offset;
        this.last = offset;
}

//   /*
//    * Peer process
//    */
//   void    receive(struct r *);    /* receive packet */
//   void    packet(struct p *, struct r *); /* process packet */
//   void    clock_filter(struct p *, double, double, double); /* filter */
//   double  root_dist(struct p *);  /* calculate root distance */
//   int     fit(struct p *);        /* determine fitness of server */
//   void    clear(struct p *, int); /* clear association */
//   int     access(struct r *);     /* determine access restrictions */

//   /*
//    * System process
//    */
//   int     main();                 /* main program */
//   void    clock_select();         /* find the best clocks */
//   void    clock_update(struct p *); /* update the system clock */
//   void    clock_combine();        /* combine the offsets */

//   /*
//    * Local clock process
//    */
//   int     local_clock(struct p *, double); /* clock discipline */
//   void    rstclock(int, double, double); /* clock state transition */

//   /*
//    * Clock adjust process
//    */
//   void    clock_adjust();         /* one-second timer process */

//   /*
//    * Poll process
//    */
//   void    poll(struct p *);               /* poll process */
//   void    poll_update(struct p *, int); /* update the poll interval */
//   void    peer_xmit(struct p *);  /* transmit a packet */
//   void    fast_xmit(struct r *, int, int); /* transmit a reply packet */

//   /*
//    * Utility routines
//    */
//   digest  md5(int);               /* generate a message digest */
//   struct p *mobilize(ipaddr, ipaddr, int, int, int, int); /* mobilize */
//   struct p *find_assoc(struct r *); /* search the association table */

//   /*
//    * Kernel interface
//    */
//   struct r *recv_packet();        /* wait for packet */
//   void    xmit_packet(struct x *); /* send packet */
//   void    step_time(double);      /* step time */
//   void    adjust_time(double);    /* adjust (slew) time */
//   tstamp  get_time();             /* read time */

/*
 * Definitions
 */
const PRECISION int8 = -18i8;     /* precision (log2 s)  */
const IPADDR uint   =   0u;       /* any IP address */
const MODE uint     =   0u;       /* any NTP mode */
const KEYID uint    =   0u;       /* any key identifier */

type NTP component {
  p @p;            /* peer structure pointer */
  r @r;            /* receive packet pointer */
  s s;             /* system */
  c c;             /* local clock */
};

func (this @NTP) Init ()
{
  println `Initializing NTP`;

  /*
   * Read command line options and initialize system variables.
   * The reference implementation measures the precision specific
   * to each machine by measuring the clock increments to read the
   * system clock.
   */
  this.s.leap = NOSYNC;
  this.s.stratum = MAXSTRAT;
  this.s.poll = MINPOLL;
  this.s.precision = PRECISION;
  this.s.p = nil;

  /*
   * Initialize local clock variables
   */
  // Skip rapid initialization using a frequency file.
  this.c.rstclock (NSET, 0f64);
  this.s.rstclock (cast<tstamp>(0u64));
  this.c.jitter = LOG2D (this.s.precision);
}

// /*
//  * main() - main program
//  */
// int
// main()
// {
//         /*
//          * Read the configuration file and mobilize persistent
//          * associations with specified addresses, version, mode, key ID,
//          * and flags.
//          */
//         while (/* mobilize configurated associations */ 0) {
//                 p = mobilize(IPADDR, IPADDR, VERSION, MODE, KEYID,
//                     P_FLAGS);
//         }

//         /*
//          * Start the system timer, which ticks once per second.  Then,
//          * read packets as they arrive, strike receive timestamp, and
//          * call the receive() routine.
//          */
//         while (0) {
//                 r = recv_packet();
//                 r->dst = get_time();
//                 receive(r);
//         }

//         return(0);
// }

instance system NTP Init;
