type Timer component {
     fd FileDescriptor;
     Alarm push ();
};

init (this *Timer) Init (interval uint64) {
     this.fd = timerfd_create();
     if (interval != 0) {
          timerfd_settime(this.fd, interval);
     }
}

action (this +const * Timer) _alarm (readable(this.fd)) {
     activate Alarm () {
          var buf [8]byte;
          var r int = read(this.fd, buf[0:8]);
     }
}

type UdpMessage struct {
  host string;
  port uint16;
  msg  []byte;
};

func (this +foreign *UdpMessage) Copy () UdpMessage {
     var m UdpMessage;
     m.host = copy (this.host);
     m.port = this.port;
     m.msg = copy (this.msg);
     return m;
}

type Element struct
{
  value UdpMessage;
  next *Element;
};

type Queue struct
{
  head *Element;
  tail **Element;
};

func (this *Queue) Push (value UdpMessage)
{
  if this.head == nil
    {
      this.tail = &this.head;
    };

  var e *Element;
  e = new (Element);
  e.value = value;
  *this.tail = e;
  this.tail = &e.next;
}

func (this *Queue) Pop ()
{
  this.head = this.head.next;
  if this.head == nil
    {
      this.tail = &this.head;
    };
}

func (this +const * Queue) Empty () bool
{
  return this.head == nil;
}

func (this *Queue) Front () UdpMessage
{
  return this.head.value;
}

type UdpParticipant component {
     fd FileDescriptor;
     queue Queue;
};

reaction (this +const * UdpParticipant) Send (msg +foreign UdpMessage) {
     var m UdpMessage = msg.Copy ();
     activate {
          this.queue.Push (m);
     };
}

action (this +const * UdpParticipant) _send (!this.queue.Empty () && writable (this.fd)) {
       activate {
              var m UdpMessage = this.queue.Front ();
              sendto (this.fd, m.host, m.port, m.msg);
              this.queue.Pop ();
       }
}

action (this +const * UdpParticipant) _receive (readable (this.fd)) {
       activate {
          var buf [128]byte;
          var r int = read(this.fd, buf[0:128]);
          println (buf[0:r]);
       }
}

init (this *UdpParticipant) Init () {
     this.fd = udp_socket();
}

type System component {
     timer Timer;
     udp UdpParticipant;
     Send push (msg +foreign UdpMessage);
};

bind (this *System) _bind {
     this.timer.Alarm -> this.Alarm;
     this.Send -> this.udp.Send;
}

init (this *System) Init () {
     this.timer.Init(1);
     this.udp.Init();
}

reaction (this +const * System) Alarm () {
     var msg +foreign UdpMessage;
     msg.host = `localhost`;
     msg.port = 7;
     msg.msg = []byte(`hello, world`);
     activate Send (msg) { };
}

instance s System Init ();