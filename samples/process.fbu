// From Distributed Algorithms, p. 204.

type Element struct
{
  value uint;
  next @Element;
};

type Queue struct
{
  head @Element;
  tail @@Element;
};

func (this @Queue) Push (v uint)
{
  if this.head == nil
    {
      this.tail = this.head&;
    };

  var e @Element;
  e = new Element;
  e.value = v;
  this.tail@ = e;
  this.tail = e.next&;
}

func (this @Queue) Pop ()
{
  this.head = this.head.next;
  if this.head == nil
    {
      this.tail = this.head&;
    };
}

func (this $Queue) Empty () bool
{
  return this.head == nil;
}

func (this $Queue) Front () uint
{
  return this.head.value;
}

type Channel component
{
  queue Queue;
  receive port (message uint);
};

reaction (this $Channel) send (message uint)
{
  trigger
  {
    this.queue.Push (message);
  };
}

action (this $Channel) (this.queue.Empty ()!)
{
  trigger receive (this.queue.Front ())
    {
      this.queue.Pop ();
    };
}

// From Distributed Algorithms, p. 205.

type Process component
{
  i uint;
  val [3]uint;
  send [3] port (v uint);
  decide port (v uint);
};

func (this @Process) Initially (i uint)
{
  println `I am process `, i;
  this.i = i;
}

reaction (this $Process) init (v uint)
{
  trigger
  {
    this.val[this.i] = v;
    println `Process `, this.i, ` initialized with value `, v;
  };
}

[3] action (this $Process) (this.val[this.i] != 0u && this.i != IOTA)
{
  // send
  println `Process `, this.i, ` sending `, this.val[this.i], ` to process `, IOTA;
  trigger send[IOTA] (this.val[this.i])
  { };
}

[3] reaction (this $Process) receive (v uint)
{
  println `Process `, this.i, ` received `, v, ` from process `, IOTA;
  trigger
  {
    this.val[IOTA] = v;
  };
}

func p (val [3]uint) bool {
  var i uint;
  i = 0u;
  while i != 3u {
    if val[i] == 0u {
      return false;
    };
    i++;
  };

  return true;
}

func f (val [3]uint) uint
{
  var i, sum uint;
  i = 0u;
  sum = 0u;
  while i != 3u {
    sum += val[i];
    i++;
  };
  return sum;
}

action (this $Process) (p (this.val))
{
  // decide
  var v uint;
  v = f (this.val);
  println `Process `, this.i, ` decided the value is `, v;
  trigger decide (v)
  { };
}

type System component
{
  process [3]Process;
  channel [3][3]Channel;
  init [3] port (v uint);
};

func (this @System) Init ()
{
  var i uint;
  i = 0u;
  while i != 3u {
    this.process[i].Initially (i);
    i++;
  };
}

[3] action (this $System) (true)
{
  // send
  trigger init[IOTA] (100u + IOTA)
  { };
}

[3] reaction (this $System) decide (v uint)
{
  println `Process `, IOTA, ` decided the value is `, v;
}

bind (this @System) {
  for i .. 3 {
    this.init[i] -> this.process[i].init;
    this.process[i].decide -> this.decide .. i;

    for j .. 3 {
      if i != j {
        this.process[i].send[j] -> this.channel[i][j].send;
        this.channel[i][j].receive -> this.process[j].receive .. i;
      }
    }
  }
}

instance system System Init;
