// Distributed Algorithms, p. 240, 242

type Variable component {
    value int;
};

func (this *Variable) Init () {
    this.value = -1i;
}

[3u] reaction (this +const * Variable) Set (v int) {
    activate {
        this.value = v;
    }
}

getter (this +const * Variable) Get () int {
    return this.value;
}

type ProcessStatus enum {
    PROCESS_IDLE,
    PROCESS_ACCESS,
    PROCESS_DECIDE,
    PROCESS_DONE
};

type Process component {
    status ProcessStatus;
    input int;
    output int;
    get_x pull () int;
    set_x push (v int);
    Decide push (v int);
};

func (this *Process) Init () {
    this.status = PROCESS_IDLE;
    this.input = -1i;
    this.output = -1i;
}

reaction (this +const * Process) initr (v int) {
    activate {
        this.input = v;
        if this.status == PROCESS_IDLE {
            this.status = PROCESS_ACCESS;
        }
    }
}

// Access
action (this +const * Process) (this.status == PROCESS_ACCESS) {
    var x int;
    x = this.get_x ();
    if x == -1i {
        activate set_x (this.input) {
            println (`x set to `, this.input);
            this.output = this.input;
            this.status = PROCESS_DECIDE;
        }
    }
    else {
        activate {
            this.output = x;
            this.status = PROCESS_DECIDE;
        }
    }
}

// Decide
action (this +const * Process) (this.status == PROCESS_DECIDE) {
    activate Decide (this.output) {
        this.status = PROCESS_DONE;
    }
}

type UserStatus enum {
    USER_REQUEST,
    USER_WAIT,
    USER_DONE
};

type User component {
    v int;
    status UserStatus;
    decision int;
    error bool;
    initp push (v int);
};

init (this *User) Init (v int) {
    this.v = v;
    this.status = USER_REQUEST;
    this.decision = -1i;
    this.error = false;
}

// Init
action (this +const * User) (this.status == USER_REQUEST || this.error) {
    activate initp (this.v) {
        if !this.error {
            this.status = USER_WAIT;
        }
    }
}

// Dummy
action (this +const * User) (this.error) {
}

reaction (this +const * User) Decide (v int) {
    println (this, ` decided value is `, v);
    activate {
        if !this.error {
            if this.status == USER_WAIT {
                this.decision = v;
                this.status = USER_DONE;
            } else {
                this.error = true;
            }
        }
    }
}

type System component {
    x Variable;
    process [3u]Process;
    user [3u]User;
};

init (this *System) Init () {
    this.x.Init ();
    for i .. 3i {
        this.process[i].Init ();
        this.user[i].Init (i + 100i);
    }
}

bind (this *System) {
    for i .. 3u {
        this.process[i].get_x <- this.x.Get;
        this.process[i].set_x -> this.x.Set .. i;
        this.user[i].initp -> this.process[i].initr;
        this.process[i].Decide -> this.user[i].Decide;
    }
}

instance s System Init ();